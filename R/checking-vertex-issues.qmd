---
title: "Checking vertex isssues"
format: html
editor: visual
---

```{r}
theme_clean <- function() {
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = "white"),
          plot.title = element_text(face = "bold"),
          axis.title = element_text(face = "bold"),
          strip.text = element_text(face = "bold", size = rel(1), hjust = 0),
          strip.background = element_rect(fill = "grey80", color = NA),
          legend.title = element_text(face = "bold"))
}
theme_set(theme_clean())

```

Create functions to calculate vertex

```{r}
# simple just using values
get_vert <- function(b1, b2) {
  vert <- -b1/(2*b2)
  vert
}

# pull values from brms model and get vertex
get_vert2 <- function(model) {
  suppressWarnings(
    m_coefs <- model |> 
      tidy() |> 
      filter(term %in% c("(Intercept)", "polyAlpha_mode21", "polyAlpha_mode22")) |> 
      select(term, estimate, std.error, conf.low, conf.high)
  )
  
  a <- m_coefs |> filter(term == "(Intercept)") |> pull(estimate)|> unname()
  b_1 <- m_coefs |> filter(term == "polyAlpha_mode21") |> pull(estimate) |> unname()
  b_2 <- m_coefs |> filter(term == "polyAlpha_mode22") |> pull(estimate) |> unname()
  (vert <- -b_1/(2*b_2))
}
```

List quadratic models:

```{r}
# list of quadratic models
m_list_verts <- list(
  brm_mods_list[["brm_mods_3b_s4"]][[11]],
  brm_mods_list[["brm_mods_3b_s4"]][[6]],
  brm_mods_list[["brm_mods_3b_s4_ind"]][[1]],
  brm_mods_list[["brm_mods_3b_p5"]][[11]],
  brm_mods_list[["brm_mods_3b_p5"]][[8]],
  brm_mods_list[["brm_mods_3b_p5_ind"]][[1]]
)
```

## TP \~ alpha\^2 (pooled baselines)

Subset data and mode:

```{r}
m <- mod_tmp2
m <- m_list_verts[[5]]
m_dat <- reg_mod_data_tidy[["p5"]]
```

Plot raw data with predicted outcome, and with a parabola function using param estimates:

```{r}
# raw data with poly smooth and vertex from model coefs
p1 <- m_dat |> 
  ggplot(aes(x = Alpha_mode, y = TP_mode)) +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_point(size = 1, alpha = 0.7) +
  geom_vline(xintercept = get_vert2(m), color = "red", linewidth = 1) +
  geom_smooth(method = "glm", formula = y ~ poly(x, 2), se = FALSE) 

# predicted outcome
newdata <- expand_grid(Alpha_mode = seq(0, 1, by = 0.05),
                       season = "summer",
                       lake_region = "se")
pred <- m |> add_epred_draws(newdata = newdata, re_formula = NA)
p2 <- pred |> 
  ggplot(aes(x = Alpha_mode, y = .epred)) +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  stat_lineribbon(.width = 0) + 
  scale_fill_brewer(palette = "Greys") + 
  geom_point(data = m_dat, aes(x = Alpha_mode, y = TP_mode)) + 
  geom_vline(xintercept = get_vert(4.5,-3.57), color = "red", linewidth = 1) +
  theme(legend.position = "none") + 
  labs(title = "Orthogonal: predicted outcome", y = "predicted TP")

p3 <- plot(conditional_effects(m, re_formula = NULL), points = TRUE)
p3 <- conditional_effects(m, "Alpha_mode", re_formula = NULL)
# plot(p3, points = TRUE)
p3 <- p3$Alpha_mode |>
  ggplot(aes(x = Alpha_mode, y = estimate__)) +
  geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = .5) +
  geom_point(data = m_dat, aes(x = Alpha_mode, y = TP_mode)) +
  geom_line() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_vline(xintercept = get_vert2(m), color = "red", linewidth = 1) +
  labs(title = "Orthogonal: predicted outcome", y = "predicted TP")

# parabola using model coefs
# m_coefs <- m |> 
#   tidy() |> 
#   filter(term %in% c("(Intercept)", "polyAlpha_mode21", "polyAlpha_mode22")) |> 
#   select(term, estimate, std.error, conf.low, conf.high)
# 
# a <- m_coefs |> filter(term == "(Intercept)") |> pull(estimate)|> unname()
# b_1 <- m_coefs |> filter(term == "polyAlpha_mode21") |> pull(estimate) |> unname()
# b_2 <- m_coefs |> filter(term == "polyAlpha_mode22") |> pull(estimate) |> unname()

a_parabola <- function(x) (-3.57 * x^2) + (4.5 * x) + 1.6
p4 <- ggplot() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = a_parabola, linewidth = 1) +
  geom_vline(xintercept = get_vert(4.5,-3.57), color = "red", linewidth = 1) +
  geom_point(data = m_dat, aes(x = Alpha_mode, y = TP_mode)) + 
  labs(title = "Orthogonal: (-3.94 * x^2) + (4.06 * x) + 2.75")

p2 | p4
```

Run non-bayes models for comparison

```{r}
fit1 <- lm(TP_mode ~ poly(Alpha_mode, 2, raw=FALSE), data=m_dat)
fit2 <- lm(TP_mode ~ poly(Alpha_mode, 2, raw=TRUE), data=m_dat)
get_vert(coef(fit1)[2], coef(fit1)[3])
get_vert(coef(fit2)[2], coef(fit2)[3])

with(m_dat, plot(Alpha_mode, TP_mode, pch = 16))
pred_data = data.frame(Alpha_mode = seq(0, 1, .05))
pred_data$TP_mode = predict(fit2, newdata = pred_data, level = 0)
with(pred_data, lines(Alpha_mode, TP_mode))
abline(v = get_vert(coef(fit2)[2], coef(fit2)[3]), lty=2)


```

So raw polys seem to have accurate vertex estimates.

Rerun the brms models a few different ways

```{r}
# same model
mod_tmp <- brm(
  bf(TP_mode ~ poly(Alpha_mode,2) + (poly(Alpha_mode,2)|lake_region) + (poly(Alpha_mode,2)|season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)

# change to raw polys
mod_tmp1 <- brm(
  bf(TP_mode ~ poly(Alpha_mode,2,raw=TRUE) + (poly(Alpha_mode,2,raw=TRUE)|lake_region) + (poly(Alpha_mode,2,raw=TRUE)|season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)

# same but with I not poly()
mod_tmp2 <- brm(
  bf(TP_mode ~ Alpha_mode + I(Alpha_mode^2) + (I(Alpha_mode^2)|lake_region) + (I(Alpha_mode^2)|season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)

# raw and no random polys
mod_tmp3 <- brm(
  bf(TP_mode ~ Alpha_mode + I(Alpha_mode^2) + (Alpha_mode|lake_region) + (Alpha_mode|season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)

# also raw and no random polys
mod_tmp4 <- brm(
  bf(TP_mode ~ poly(Alpha_mode,2,raw = TRUE) + (Alpha_mode|lake_region) + (Alpha_mode|season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)


loo(m, mod_tmp, mod_tmp1, mod_tmp2, mod_tmp3, mod_tmp4)

get_vert2(m)
get_vert2(mod_tmp)
get_vert(4.55, -3.64)
get_vert(4.5, -3.57)
get_vert(4.49, -3.6)
get_vert(4.49, -3.6)


```

The raw polys seems to fix this?

```{r}

pred <- mod_tmp2 |> add_epred_draws(newdata = newdata, re_formula = NULL)
p5 <- pred |> 
  ggplot(aes(x = Alpha_mode, y = .epred)) +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  stat_lineribbon(.width = 0) + 
  scale_fill_brewer(palette = "Greys") +
  geom_point(data = m_dat, aes(x = Alpha_mode, y = TP_mode)) + 
  geom_vline(xintercept = get_vert(4.49, -3.6), color = "red", linewidth = 1) +
  theme(legend.position = "none") + 
  labs(title = "Raw: predicted outcome", y = "predicted TP")


a_parabola <- function(x) (-3.6 * x^2) + (4.49 * x) + 1.6
# a_parabola <- function(x) (-3.22 * x^2) + (4.74 * x) + 1.58
p6 <- ggplot() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = a_parabola, linewidth = 1) +
  geom_vline(xintercept = get_vert(4.49, -3.6), color = "red", linewidth = 1) + 
  geom_point(data = m_dat, aes(x = Alpha_mode, y = TP_mode)) + 
  labs(title = "Raw: (-3.6 * x^2) + (4.49 * x) + 1.6")

(p2 | p4) / (p5 | p6) + plot_annotation(
  title = "Data and models related to Fig 3(g)"
)

ggsave(
  here("out","plots","R1","vetex_issues.png"),
  last_plot(), height = 16, width = 24, units = "cm", device = png)

```

The coefficients in orthogonal polynomials represent completely different quantities from the coefficients on raw polynomials. The model-implied R2, MSE, predicted values, and the standard errors of the predicted values will all be identical regardless of whether you use orthogonal or raw polynomials.

The only difference is the interpretation of the coefficients. If you would prefer to look at the coefficients and know exactly what they mean, then you should use the raw polynomials. If you don't care (i.e., you only want to control for confounding or generate predicted values), then it truly doesn't matter; both forms carry the same information with respect to those goals.

## mass \~ alpha\^2 (pooled baselines)

Subset data and mode:

```{r}
m <- m_list_verts[[4]]
m_dat <- reg_mod_data_tidy[["p5"]]
```

Plot raw data with predicted outcome, and with a parabola function using param estimates:

```{r}
# raw data with poly smooth and vertex from model coefs
p10 <- m_dat |> 
  ggplot(aes(x = Alpha_mode, y = log_mass)) +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_point(size = 1, alpha = 0.7) +
  geom_vline(xintercept = get_vert2(m), color = "red", linewidth = 1) +
  geom_smooth(method = "glm", formula = y ~ poly(x, 2), se = FALSE) 

# predicted outcome
newdata <- expand_grid(Alpha_mode = seq(0, 1, by = 0.05),
                       season = "summer",
                       lake_region = "se")
pred <- m |> add_epred_draws(newdata = newdata, re_formula = NULL)
p11 <- pred |> 
  ggplot(aes(x = Alpha_mode, y = .epred)) +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  stat_lineribbon(.width = 0) + 
  scale_fill_brewer(palette = "Greys") + 
  geom_point(data = m_dat, aes(x = Alpha_mode, y = log_mass)) + 
  geom_vline(xintercept = get_vert2(m), color = "red", linewidth = 1) +
  theme(legend.position = "none") + 
  labs(title = "Orthogonal: predicte outcome", y = "predicted log mass")

# p3 <- plot(conditional_effects(m, re_formula = NULL), points = TRUE)
# p3 <- conditional_effects(m, "Alpha_mode", re_formula = NULL)
# p3 <- p3$Alpha_mode |>
#   ggplot(aes(x = Alpha_mode, y = estimate__)) +
#   geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = .5) +
#   geom_point(data = m_dat, aes(x = Alpha_mode, y = log_mass)) +
#   geom_line() +
#   geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
#   geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
#   geom_vline(xintercept = get_vert2(m), linetype = "dashed")

# parabola using model coefs
# m_coefs <- m |> 
#   tidy() |> 
#   filter(term %in% c("(Intercept)", "polyAlpha_mode21", "polyAlpha_mode22")) |> 
#   select(term, estimate, std.error, conf.low, conf.high)
# 
# a <- m_coefs |> filter(term == "(Intercept)") |> pull(estimate)|> unname()
# b_1 <- m_coefs |> filter(term == "polyAlpha_mode21") |> pull(estimate) |> unname()
# b_2 <- m_coefs |> filter(term == "polyAlpha_mode22") |> pull(estimate) |> unname()

a_parabola <- function(x) (-43.72 * x^2) + (-18.18 * x) - 1.19
p12 <- ggplot() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = a_parabola, linewidth = 1) +
  geom_vline(xintercept = get_vert2(m), color = "red", linewidth = 1) + 
  geom_point(data = m_dat, aes(x = Alpha_mode, y = log_mass)) + 
  labs(title = "orthogonal: (-43.72 * x^2) + (-18.18 * x) - 1.19")

p11 | p12
```

Run non-bayes models for comparison

```{r}
fit1 <- lm(log_mass ~ poly(Alpha_mode, 2, raw=FALSE), data=m_dat)
fit2 <- lm(log_mass ~ poly(Alpha_mode, 2, raw=TRUE), data=m_dat)
get_vert(coef(fit1)[2], coef(fit1)[3])
get_vert(coef(fit2)[2], coef(fit2)[3])

with(m_dat, plot(Alpha_mode, log_mass, pch = 16))
pred_data = data.frame(Alpha_mode = seq(-16, 9, .1))
pred_data$log_mass = predict(fit2, newdata = pred_data, level = 0)
with(pred_data, lines(Alpha_mode, log_mass))
abline(v = get_vert(coef(fit2)[2], coef(fit2)[3]), lty=2)

```

So raw polys seem to have accurate vertex estimates. Orthogonal is very wrong

Rerun the brms models a few different ways

```{r}
# same model as m
brm_20 <- brm(
  bf(log_mass ~ poly(Alpha_mode, 2) + (1 | lake_region) + (1 | season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)

# now with raw polys
brm_21 <- brm(
  bf(log_mass ~ poly(Alpha_mode, 2, raw=TRUE) + (1 | lake_region) + (1 | season)),
  m_dat, 
  control = list(adapt_delta=adapt_d, max_treedepth = tree_depth),
  seed=12345, chains=n_chains, iter=2000, thin=n_thin, cores=n_cores)

loo(m, brm_20, brm_21)
get_vert2(m)
get_vert2(brm_20)
get_vert(34, -39.89)  #brm_21

```

The raw polys seems to fix this?

```{r}

pred <- brm_21 |> add_epred_draws(newdata = newdata, re_formula = NULL)
p13 <- pred |> 
  ggplot(aes(x = Alpha_mode, y = .epred)) +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  stat_lineribbon(.width = 0) + 
  scale_fill_brewer(palette = "Greys") +
  geom_point(data = m_dat, aes(x = Alpha_mode, y = log_mass)) + 
  geom_vline(xintercept = get_vert(34, -39.8), color = "red", linewidth = 1) +
  theme(legend.position = "none") + 
  labs(title = "Predicted: raw polynomial regression", y = "predicted TP")


a_parabola <- function(x) (-39.89 * x^2) + (34 * x) -5.21
p14 <- ggplot() +
  geom_vline(xintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_hline(yintercept = 0, linewidth = 0.5, color = "grey50") +
  geom_function(fun = a_parabola, linewidth = 1) +
  geom_vline(xintercept = get_vert(34, -39.8), color = "red", linewidth = 1) + 
  geom_point(data = m_dat, aes(x = Alpha_mode, y = log_mass)) + 
  labs(title = "Parabola: raw polynomial regression")

(p11 | p12) / (p13 | p14) + plot_annotation(
  title = "Data and models related to Fig 3(f)"
)

ggsave(
  here("out","plots","R1","vetex_issues_2.png"),
  last_plot(), height = 16, width = 24, units = "cm", device = png)
```
